import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
from FurniturePlanner import glob

modes = {}
class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    

    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        code = 'World'
        html = 'nothing happened'
        global modes
        changeMode = False
        client_address = self.client_address[0]

        if client_address not in modes:
            modes.update({client_address: "VIEW"})
        
        query_components = parse_qs(urlparse(self.path).query)
        if 'code' in query_components:
            code = query_components["code"][0]
            if code in glob.Operations:
                changeMode = True
                modes.update({client_address: code})

        #mode = modes[client_address]

        #recognise code
        if changeMode:
            html = f"<html><head></head><body><h1>Device: {client_address}<br>Changed mode to - {code}</h1></body></html>"
            
        else:
        # Some custom HTML code, possibly generated by another function
            html = f"<html><head></head><body><h1>Device: {client_address}<br>Operation {modes[client_address]} performed against {code}</h1></body></html>"

        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(html, "utf8"))
        print (modes)
        return

# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8001
my_server = socketserver.TCPServer(("", PORT), handler_object)

# Star the server
my_server.serve_forever()